/*
 * File: app/controller/SecondaryFunction.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tawks.controller.SecondaryFunction', {
    extend: 'Ext.app.Controller',

    config: {
        routes: {
            'secondaryFunction': 'showSecondaryFunction'
        },

        control: {
            "formpanel#secondaryFunction": {
                initialize: 'onFormpanelInitialize',
                deactivate: 'onSecondaryFunctionDeactivate'
            },
            "button#functionNext1": {
                tap: 'onFunctionNextTap1'
            }
        }
    },

    onFormpanelInitialize: function(component, eOpts) {
        var store = Ext.getStore('functions'),
            checkboxes = [],
            functionNext = Ext.ComponentQuery.query('#functionNext1')[0],
            secondaryFunctionBottom = Ext.ComponentQuery.query('#secondaryFunctionBottom')[0],
            main = Ext.getCmp('main'),
            functionSet = component.getComponent('functionSet');


        //  Sorry bout this...
        store.each(function (item, index, length) {
            var hideValue = false;

            if(item.data.type === main.functions[0]) {
                hideValue = true;
            }
            var checkbox = { xtype: 'radiofield', 
                definition: item.data.description, 
                value: item.data.type, 
                label: item.data.type,
                hidden: hideValue, 
                labelWidth: '80%', 
                labelWrap: true, 
                name: 'functions',
                listeners: {

                    initialize: function(component, eOpts) {
                        component.element.on('taphold', function() {
                            var description = Ext.Msg.alert(item.data.type, item.data.description, 
                            function(btn, something) {
                                component.setChecked(false);
                            });
                        });
                    },
                    change: function(val) {
                        secondaryFunctionBottom.show();
                        functionNext.setDisabled(false);
                        functionNext.setUi('confirm');
                    }

                }
            };

            checkboxes.push(checkbox);

        });

        functionSet.add(checkboxes);
    },

    onFunctionNextTap1: function(button, e, eOpts) {
        var main = Ext.getCmp('main'),
            values = Ext.ComponentQuery.query('#secondaryFunction')[0].getValues();

        if(values.functions === 'undefined') {

            var description = Ext.Msg.alert('Alert', 'You Didn\'t Select a Function.', 
            function(btn, something) {

            });

        } else {


            main.functions[1] = values.functions;
            this.redirectTo('social');
            console.log(main.functions);

        }


    },

    onSecondaryFunctionDeactivate: function(oldActiveItem, container, newActiveItem, eOpts) {
        var secondaryFunctionBottom = Ext.ComponentQuery.query('#secondaryFunctionBottom')[0];
        secondaryFunctionBottom.hide();
    },

    showSecondaryFunction: function() {
        var main = Ext.getCmp('main'),
            view = Ext.create('Tawks.view.SecondaryFunction');

        main.setActiveItem(view);
    }

});