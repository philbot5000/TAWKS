/*
 * File: app/controller/Functions.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tawks.controller.Functions', {
    extend: 'Ext.app.Controller',

    config: {
        routes: {
            'functions': 'showFunctions'
        },

        control: {
            "button#addSecondaryFunction": {
                tap: 'onAddSecondaryFunctionTap'
            },
            "button#functionNext": {
                tap: 'onFunctionNextTap'
            },
            "formpanel#functions": {
                initialize: 'onFormpanelInitialize'
            }
        }
    },

    onAddSecondaryFunctionTap: function(button, e, eOpts) {
        this.redirectTo('secondaryFunction');
    },

    onFunctionNextTap: function(button, e, eOpts) {
        var main = Ext.getCmp('main');

        main.functions = [];

        var values = Ext.ComponentQuery.query('#functions')[0].getValues();


        main.functions.push(values.function);

        console.log(main.functions);

        this.redirectTo('social');
    },

    onFormpanelInitialize: function(component, eOpts) {
        var store = Ext.getStore('functions'),
            checkboxes = [],
            functionSet = component.getComponent('functionSet'),
            functionNext = Ext.ComponentQuery.query('#functionNext')[0],
            secondaryFunction = Ext.ComponentQuery.query('#addSecondaryFunction')[0];


        //  itemId: 'socialCheck',
        store.each(function (item, index, length) {
            var checkbox = { xtype: 'radiofield', 
                definition: item.data.description, 
                value: item.data.type, 
                label: item.data.type, 
                labelWidth: '80%', 
                labelWrap: true, 
                name: 'function',
                listeners: {

                    initialize: function(component, eOpts) {
                        component.element.on('taphold', function() {
                            var description = Ext.Msg.alert(item.data.type, item.data.description, 
                            function(btn, something) {
                                component.setChecked(false);
                            });
                        });
                    },
                    change: function(component, val) {
                        if(val) {
                            functionNext.setDisabled(false);
                            functionNext.setUi('confirm');
                            secondaryFunction.setDisabled(false);
                        } else {
                            functionNext.setDisabled(true);
                            functionNext.setUi('normal');
                            secondaryFunction.setDisabled(true);
                        }
                    }


                }
            };

            checkboxes.push(checkbox);

        });

        functionSet.add(checkboxes);
    },

    showFunctions: function() {
        var main = Ext.getCmp('main'),
            view = Ext.create('Tawks.view.Functions');

        main.setActiveItem(view);
    }

});