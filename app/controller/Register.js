/*
 * File: app/controller/Register.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tawks.controller.Register', {
    extend: 'Ext.app.Controller',

    config: {
        routes: {
            'register': 'showRegister',
            'register/edit': 'showRegisterEdit'
        },

        control: {
            "datetimepickerfield#mondayStartTime": {
                focus: 'onMondayStartTimeFocus'
            },
            "textfield#mondayEndTime": {
                focus: 'onMondayEndTimeFocus'
            },
            "button#register": {
                tap: 'onRegisterTap'
            },
            "formpanel#register": {
                initialize: 'onRegisterInitialize'
            }
        }
    },

    onMondayStartTimeFocus: function(target) {
        //this.showPicker(textfield);
        console.log('hey');
    },

    onMondayEndTimeFocus: function(textfield, e, eOpts) {
        //this.showPicker(textfield);
    },

    onRegisterTap: function(button, e, eOpts) {
        var main = Ext.getCmp('main'),
            register = main.getComponent('register');

        var params = {};

        console.log(register.getValues());

        Ext.Ajax.request({
            url: 'https://dev-web.boisestate.edu/tawks/account/register',
            method: 'POST',
            headers: {
                "Content-Type": "application/json"
            },
            params: Ext.encode(register.getValues()),
            success: function(response){
                var text = Ext.decode(response.responseText);


                console.log(text);

                me.redirectTo('pending');
            },
            failure: function(response) {
                console.log(response);
            }    
        });
    },

    onRegisterInitialize: function(component, eOpts) {
        //new Date("2013-01-01T14:30:00.0000000".replace(/-/g,'/').replace(/T/,' ').replace(/\+/,' +'))
        var me = this;

        if(component.config.edit) {

            component.setMasked({xtype: 'loadmask', message: 'Loading...'});

            Ext.Ajax.request({
                url: 'https://dev-web.boisestate.edu/tawks/account/getsettings',
                method: 'GET',
                success: function(response){

                    //console.log(response);
                    component.setMasked(false);

                    var values = Ext.decode(response.responseText);

                    values.mondayStartTime = me.convertDate(values.mondayStartTime);
                    values.mondayEndTime = me.convertDate(values.mondayEndTime);
                    values.tuesdayStartTime = me.convertDate(values.tuesdayStartTime);
                    values.tuesdayEndTime = me.convertDate(values.tuesdayEndTime);
                    values.wednesdayStartTime = me.convertDate(values.wednesdayStartTime);
                    values.wednesdayEndTime = me.convertDate(values.wednesdayEndTime);
                    values.thursdayStartTime = me.convertDate(values.thursdayStartTime);
                    values.thursdayEndTime = me.convertDate(values.thursdayEndTime);
                    values.fridayStartTime = me.convertDate(values.fridayStartTime);
                    values.fridayEndTime = me.convertDate(values.fridayEndTime);
                    values.saturdayStartTime = me.convertDate(values.saturdayStartTime);
                    values.saturdayEndTime = me.convertDate(values.saturdayEndTime);
                    values.sundayStartTime = me.convertDate(values.sundayStartTime);
                    values.sundayEndTime = me.convertDate(values.sundayEndTime);
                    values.endDayQuestionTime = me.convertDate(values.endDayQuestionTime);
                    console.log(values);

                    component.setValues(values);
                },
                failure: function(response) {
                    console.log(response);
                }    
            });

        }
    },

    showRegister: function() {
        var main = Ext.getCmp('main'),
            register = Ext.create('Tawks.view.Register');

        main.setActiveItem(register);
    },

    showRegisterEdit: function() {
        var main = Ext.getCmp('main'),
            register = Ext.create('Tawks.view.Register', {edit: true});

        main.setActiveItem(register);
    },

    convertDate: function(isoString) {
        if(isoString === '') {
            return null;
        } else {
            return new Date(isoString.replace(/-/g,'/').replace(/T/,' ').replace(/\+/,' +'));
        }
    },

    showPicker: function(textfield) {
        //var timePicker = Ext.ComponentQuery.query('#timePicker')[0] || Ext.create('Tawks.view.TimePicker');

        //timePicker.show();
        //timePicker.form = textfield;
    }

});