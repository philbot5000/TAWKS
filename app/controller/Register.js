/*
 * File: app/controller/Register.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tawks.controller.Register', {
    extend: 'Ext.app.Controller',

    config: {
        routes: {
            'register': 'showRegister',
            'register/edit': 'showRegisterEdit'
        },

        control: {
            "button#registerButton": {
                tap: 'onRegisterTap'
            },
            "formpanel#register": {
                initialize: 'onRegisterInitialize'
            }
        }
    },

    onRegisterTap: function(button, e, eOpts) {
        var main = Ext.getCmp('main'),
            me = this,
            register = main.getComponent('register');

        register.setMasked({xtype: 'loadmask', message: 'Loading...'});


        var params = {};

        var registerVals = register.getValues();

        registerVals.mondayStartTime = this.convertToISO(register.getValues().mondayStartTime);
        registerVals.mondayEndTime = this.convertToISO(register.getValues().mondayEndTime);
        registerVals.tuesdayStartTime = this.convertToISO(register.getValues().tuesdayStartTime);
        registerVals.tuesdayEndTime = this.convertToISO(register.getValues().tuesdayEndTime);
        registerVals.wednesdayStartTime = this.convertToISO(register.getValues().wednesdayStartTime);
        registerVals.wednesdayEndTime = this.convertToISO(register.getValues().wednesdayEndTime);
        registerVals.thursdayStartTime = this.convertToISO(register.getValues().thursdayStartTime);
        registerVals.thursdayEndTime = this.convertToISO(register.getValues().thursdayEndTime);
        registerVals.fridayStartTime = this.convertToISO(register.getValues().fridayStartTime);
        registerVals.fridayEndTime = this.convertToISO(register.getValues().fridayEndTime);
        registerVals.saturdayStartTime = this.convertToISO(register.getValues().saturdayStartTime);
        registerVals.saturdayEndTime = this.convertToISO(register.getValues().saturdayEndTime);
        registerVals.sundayStartTime = this.convertToISO(register.getValues().sundayStartTime);
        registerVals.sundayEndTime = this.convertToISO(register.getValues().sundayEndTime);
        registerVals.endDayQuestionTime = this.convertToISO(register.getValues().endDayQuestionTime);

        if(this.checkValid(registerVals)) {
            Ext.Ajax.request({
                url: 'https://dev-web.boisestate.edu/tawks/account/register',
                method: 'POST',
                headers: {
                    "Content-Type": "application/json"
                },
                params: Ext.encode(registerVals),
                success: function(response){
                    var text = Ext.decode(response.responseText);


                    console.log(text);
                    register.setMasked(false);
                    if(button.getText() === 'Update') {
                        me.redirectTo('update');
                    } else {
                        me.redirectTo('pending');
                    }
                },
                failure: function(response) {
                    console.log(response);
                }
            });

        } else {
            var description = Ext.Msg.alert('Uh Oh', 'Gender, rank, paid responsibility, carrier, phone, and end of day question time are all required fields.', 
            function(btn, something) {
                register.setMasked(false);

            });


        }
    },

    onRegisterInitialize: function(component, eOpts) {
        var me = this;

        if(component.config.edit) {

            Ext.ComponentQuery.query('#registerButton')[0].setText('Update');

            component.setMasked({xtype: 'loadmask', message: 'Loading...'});

            Ext.Ajax.request({
                url: 'https://dev-web.boisestate.edu/tawks/account/getsettings',
                method: 'GET',
                success: function(response){

                    component.setMasked(false);

                    var values = Ext.decode(response.responseText);

                    values.mondayStartTime = me.convertDate(values.mondayStartTime);
                    values.mondayEndTime = me.convertDate(values.mondayEndTime);
                    values.tuesdayStartTime = me.convertDate(values.tuesdayStartTime);
                    values.tuesdayEndTime = me.convertDate(values.tuesdayEndTime);
                    values.wednesdayStartTime = me.convertDate(values.wednesdayStartTime);
                    values.wednesdayEndTime = me.convertDate(values.wednesdayEndTime);
                    values.thursdayStartTime = me.convertDate(values.thursdayStartTime);
                    values.thursdayEndTime = me.convertDate(values.thursdayEndTime);
                    values.fridayStartTime = me.convertDate(values.fridayStartTime);
                    values.fridayEndTime = me.convertDate(values.fridayEndTime);
                    values.saturdayStartTime = me.convertDate(values.saturdayStartTime);
                    values.saturdayEndTime = me.convertDate(values.saturdayEndTime);
                    values.sundayStartTime = me.convertDate(values.sundayStartTime);
                    values.sundayEndTime = me.convertDate(values.sundayEndTime);
                    values.endDayQuestionTime = me.convertDate(values.endDayQuestionTime);

                    component.setValues(values);
                },
                failure: function(response) {
                    console.log(response);
                }    
            });

        }
    },

    showRegister: function() {
        var main = Ext.getCmp('main'),
            register = Ext.create('Tawks.view.Register');

        main.setActiveItem(register);
    },

    showRegisterEdit: function() {
        var main = Ext.getCmp('main'),
            register = Ext.create('Tawks.view.Register', {edit: true});

        main.setActiveItem(register);
    },

    convertDate: function(isoString) {
        if(isoString === null) {
            return null;
        } else {
            return new Date(isoString.replace(/-/g,'/').replace(/T/,' ').replace(/\+/,' +'));
        }
    },

    showPicker: function(textfield) {
        //var timePicker = Ext.ComponentQuery.query('#timePicker')[0] || Ext.create('Tawks.view.TimePicker');

        //timePicker.show();
        //timePicker.form = textfield;
    },

    checkValid: function(params) {
        if(params.email !== '' && params.gender !== '' && params.rank !== '' && params.paidResponsibility !== '' && params.carrier !== '' && params.phone !== '' && params.endDayQuestionTime !== '') {
            return true;
        } else {
            return false;
        }
    },

    convertToISO: function(val) {
        if(val !== null) {
            return val.toISOString();
        } else {
            return '';
        }
    }

});